#!/usr/bin/env python3
"""
AgenticAI V4 - Script de seed de la base de donn√©es
Initialise les donn√©es de base (agents, politiques, etc.)
"""
import asyncio
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from backend.agents import seed_default_agents
from backend.config import get_settings

async def seed_database():
    """Seed la base de donn√©es avec les donn√©es initiales."""
    print("üå± AgenticAI V4 - Seed de la base de donn√©es")
    print("=" * 50)

    settings = get_settings()
    print(f"üìã Environnement: {settings.environment}")
    print(f"üìã Version: {settings.api_version}")
    print()

    # 1. Seed agents par d√©faut
    print("1Ô∏è‚É£  Chargement des agents par d√©faut...")
    try:
        seed_default_agents()
        print("‚úÖ Agents charg√©s avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement des agents: {e}")
        return False

    # 2. TODO: Seed politiques d'orchestration
    print("\n2Ô∏è‚É£  Chargement des politiques d'orchestration...")
    print("‚è≠Ô∏è  TODO: Impl√©menter le seed des politiques")

    # 3. TODO: Seed collections Qdrant
    print("\n3Ô∏è‚É£  Initialisation des collections Qdrant...")
    print("‚è≠Ô∏è  TODO: Cr√©er les collections vectorielles")

    # 4. TODO: Seed donn√©es de test (optionnel)
    print("\n4Ô∏è‚É£  Donn√©es de test (optionnel)...")
    print("‚è≠Ô∏è  TODO: Ajouter des donn√©es de test")

    print("\n" + "=" * 50)
    print("‚úÖ Seed termin√© avec succ√®s!")
    print("\nProchaines √©tapes:")
    print("  1. D√©marrer l'API: ./scripts/run-backend.sh")
    print("  2. Tester: curl http://localhost:8000/info")
    print("  3. Docs: http://localhost:8000/docs")

    return True

def main():
    """Point d'entr√©e principal."""
    try:
        result = asyncio.run(seed_database())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Seed interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
