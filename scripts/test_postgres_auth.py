#!/usr/bin/env python3
"""
Test du syst√®me d'authentification avec PostgreSQL
Ce script v√©rifie que la persistence fonctionne correctement
"""

import asyncio
import sys
from pathlib import Path

# Ajouter backend au path
sys.path.insert(0, str(Path(__file__).parent.parent / "backend"))

from models.user import UserCreate
from services.auth import AuthService
from services.user import UserService


async def test_postgres_persistence():
    """Test complet du syst√®me d'authentification avec PostgreSQL"""

    print("="*70)
    print("üß™ Test Syst√®me d'Authentification PostgreSQL - AgenticAI V4")
    print("="*70)
    print()

    # Initialiser les services
    auth_service = AuthService()
    user_service = UserService()

    print("üì¶ Services initialis√©s")
    print()

    # ========================================================================
    # Test 1: Initialisation de la base de donn√©es
    # ========================================================================
    print("1Ô∏è‚É£  Test initialisation base de donn√©es")
    print("-" * 70)

    try:
        await user_service.init_db()
        print("‚úÖ Base de donn√©es initialis√©e")
        print("‚úÖ Tables cr√©√©es")
    except Exception as e:
        print(f"‚ùå Erreur initialisation: {e}")
        return

    print()

    # ========================================================================
    # Test 2: Utilisateur admin par d√©faut
    # ========================================================================
    print("2Ô∏è‚É£  Test admin par d√©faut")
    print("-" * 70)

    admin = await user_service.authenticate("admin@agenticai.dev", "admin123")
    if admin:
        print(f"‚úÖ Admin trouv√©: {admin.email}")
        print(f"   ID: {admin.id}")
        print(f"   R√¥le: {admin.role}")
        print(f"   Quotas: {admin.max_agents} agents, {admin.max_documents} docs")
    else:
        print("‚ùå Admin non trouv√©")
        return

    print()

    # ========================================================================
    # Test 3: Cr√©ation utilisateur
    # ========================================================================
    print("3Ô∏è‚É£  Test cr√©ation utilisateur")
    print("-" * 70)

    try:
        new_user_data = UserCreate(
            email="postgres_test@example.com",
            username="postgresuser",
            password="SecurePass123!",
            full_name="PostgreSQL Test User"
        )

        new_user = await user_service.create_user(new_user_data)
        print(f"‚úÖ Utilisateur cr√©√©: {new_user.email}")
        print(f"   ID: {new_user.id}")
        print(f"   Username: {new_user.username}")
        print(f"   Statut: {new_user.status}")
        new_user_id = new_user.id
    except ValueError as e:
        print(f"‚ö†Ô∏è  {e}")
        # Si l'utilisateur existe d√©j√†, le r√©cup√©rer
        existing_user = await user_service.get_user_by_email("postgres_test@example.com")
        if existing_user:
            print(f"‚úÖ Utilisateur existant r√©cup√©r√©: {existing_user.email}")
            new_user_id = existing_user.id
        else:
            print("‚ùå Erreur lors de la r√©cup√©ration de l'utilisateur")
            return

    print()

    # ========================================================================
    # Test 4: Persistence - R√©cup√©ration apr√®s cr√©ation
    # ========================================================================
    print("4Ô∏è‚É£  Test persistence - R√©cup√©ration")
    print("-" * 70)

    retrieved_user = await user_service.get_user(new_user_id)
    if retrieved_user:
        print(f"‚úÖ Utilisateur r√©cup√©r√© depuis la DB: {retrieved_user.email}")
        print(f"   M√™me ID: {retrieved_user.id == new_user_id}")
    else:
        print("‚ùå Utilisateur non trouv√© en DB")

    print()

    # ========================================================================
    # Test 5: Authentification avec persistence
    # ========================================================================
    print("5Ô∏è‚É£  Test authentification avec DB")
    print("-" * 70)

    # Mauvais mot de passe
    bad_auth = await user_service.authenticate("postgres_test@example.com", "wrongpassword")
    if not bad_auth:
        print("‚úÖ Mauvais mot de passe rejet√©")
    else:
        print("‚ùå Mauvais mot de passe accept√© (probl√®me !)")

    # Bon mot de passe
    good_auth = await user_service.authenticate("postgres_test@example.com", "SecurePass123!")
    if good_auth:
        print(f"‚úÖ Authentification r√©ussie: {good_auth.email}")
        print(f"   Last login: {good_auth.last_login}")
    else:
        print("‚ùå Authentification √©chou√©e")

    print()

    # ========================================================================
    # Test 6: Cl√© API avec persistence
    # ========================================================================
    print("6Ô∏è‚É£  Test cl√© API avec DB")
    print("-" * 70)

    if good_auth:
        api_key = await user_service.create_api_key(good_auth.id, name="Test Key")
        if api_key:
            print(f"‚úÖ Cl√© API g√©n√©r√©e et stock√©e en DB:")
            print(f"   {api_key}")
            print()

            # V√©rifier la cl√© API
            api_user = await user_service.verify_api_key(api_key)
            if api_user:
                print(f"‚úÖ Cl√© API valide pour: {api_user.email}")
                print(f"   M√™me utilisateur: {api_user.id == good_auth.id}")
            else:
                print("‚ùå Cl√© API invalide")
        else:
            print("‚ùå √âchec g√©n√©ration cl√© API")

    print()

    # ========================================================================
    # Test 7: Liste des utilisateurs depuis DB
    # ========================================================================
    print("7Ô∏è‚É£  Test liste utilisateurs depuis DB")
    print("-" * 70)

    users = await user_service.list_users()
    print(f"‚úÖ {len(users)} utilisateur(s) trouv√©(s) en DB:")
    for user in users:
        print(f"   ‚Ä¢ {user.email} ({user.role}) - {user.status}")

    print()

    # ========================================================================
    # Test 8: Nouvelle session - V√©rifier persistence
    # ========================================================================
    print("8Ô∏è‚É£  Test nouvelle session (simul√©e)")
    print("-" * 70)

    # Cr√©er un nouveau service (simule un red√©marrage)
    new_service = UserService()
    await new_service.init_db()

    # V√©rifier que les donn√©es persistent
    persistent_user = await new_service.get_user(new_user_id)
    if persistent_user:
        print(f"‚úÖ Donn√©es persistantes apr√®s 'red√©marrage'")
        print(f"   Email: {persistent_user.email}")
        print(f"   Username: {persistent_user.username}")
        print(f"   Created: {persistent_user.created_at}")
    else:
        print("‚ùå Donn√©es perdues apr√®s 'red√©marrage' (√©chec persistence)")

    print()

    # ========================================================================
    # Test 9: Authentification apr√®s 'red√©marrage'
    # ========================================================================
    print("9Ô∏è‚É£  Test authentification apr√®s 'red√©marrage'")
    print("-" * 70)

    reauth = await new_service.authenticate("postgres_test@example.com", "SecurePass123!")
    if reauth:
        print(f"‚úÖ Authentification r√©ussie apr√®s red√©marrage")
        print(f"   Email: {reauth.email}")
        print(f"   Last login mis √† jour: {reauth.last_login}")
    else:
        print("‚ùå Authentification √©chou√©e apr√®s red√©marrage")

    print()

    # ========================================================================
    # R√©sum√©
    # ========================================================================
    print("="*70)
    print("‚úÖ Tous les tests de persistence pass√©s avec succ√®s !")
    print("="*70)
    print()
    print("üìä R√©sum√©:")
    print(f"   ‚Ä¢ Utilisateurs en DB: {len(users)}")
    print(f"   ‚Ä¢ Persistence: ‚úÖ")
    print(f"   ‚Ä¢ Authentication: ‚úÖ")
    print(f"   ‚Ä¢ JWT: ‚úÖ")
    print(f"   ‚Ä¢ Cl√©s API: ‚úÖ")
    print(f"   ‚Ä¢ Red√©marrage: ‚úÖ")
    print()
    print("üéâ Syst√®me d'authentification PostgreSQL op√©rationnel!")
    print()


async def test_connection():
    """Test simple de connexion PostgreSQL"""
    print("üîç Test de connexion PostgreSQL...")
    try:
        user_service = UserService()
        await user_service.init_db()
        print("‚úÖ Connexion PostgreSQL r√©ussie!")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion PostgreSQL: {e}")
        print()
        print("üí° Assurez-vous que:")
        print("   1. Docker est d√©marr√©")
        print("   2. PostgreSQL est lanc√©: docker compose up -d postgres")
        print("   3. Les variables d'environnement sont correctes dans .env")
        return False


if __name__ == "__main__":
    # Test de connexion d'abord
    can_connect = asyncio.run(test_connection())
    print()

    if can_connect:
        # Lancer les tests complets
        asyncio.run(test_postgres_persistence())
    else:
        sys.exit(1)
